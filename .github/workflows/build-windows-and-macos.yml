name: Build and Release Executables

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            ext: .exe
            artifact: Civ7Colors-Windows.exe
            pyinstaller_name: Civ7Colors
          - os: macos-latest
            ext: ""
            artifact: Civ7Colors-macOS
            pyinstaller_name: Civ7Colors
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --name ${{ matrix.pyinstaller_name }} main.py
          ls -lh dist

      - name: Rename built file for release clarity
        run: |
          cd dist
          mv "${{ matrix.pyinstaller_name }}${{ matrix.ext }}" "${{ matrix.artifact }}"
          ls -lh

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist/${{ matrix.artifact }}

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed to access all tags

      - name: Determine next version tag
        id: version
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latest_tag"

          # Strip "v" and split version into parts
          version=${latest_tag#v}
          major=$(echo "$version" | cut -d. -f1)
          minor=$(echo "$version" | cut -d. -f2)
          patch=$(echo "$version" | cut -d. -f3)

          # Increment patch version
          new_tag="v$major.$minor.$((patch + 1))"
          echo "New tag: $new_tag"

          # Save for later steps
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Display structure
        run: |
          echo "Downloaded artifacts:"
          ls -R ./dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Auto Release ${{ steps.version.outputs.tag }}"
          files: |
            dist/windows-latest/Civ7Colors-Windows.exe
            dist/macos-latest/Civ7Colors-macOS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push new tag
        run: |
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}
